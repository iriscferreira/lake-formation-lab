 
AWSTemplateFormatVersion: '2010-09-09'
Description: Data Mask Pipeline

Parameters:
  LatestAmzn2AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2

Metadata: 
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - 
        Label:
          default: "Basic configuration"
        Parameters: 
          - LatestAmzn2AmiId
          - TestUserPassword
      - 
        Label: 
          default: "Database and DMS configuration"
        Parameters:
          - DBName
          - DBUser
          - CreateDMSRole
      - 
        Label:
          default: "Network Configuration"
        Parameters:
          - VPCCIDR
          - PublicSubnet0CIDR
          - PublicSubnet1CIDR
          - PrivateSubnet0CIDR
          - PrivateSubnet1CIDR
    ParameterLabels:
      VPCCIDR:
        default: "Which VPC should this be deployed to?"
      CreateDMSRole:
        default: "Should we create the DMS VPC Role?"
      TestUserPassword:
        default: "Password to allow the personas to login to the AWS console"
      DBName:
        default: "MySQL database name"
      DBUser:
        default: "MySQL database user"
      LatestAmzn2AmiId:
        default: "Latest Amazon Linux 2 AMI available (optional to modify)"
      PublicSubnet0CIDR:
        default: "CIDR range for the Public Subnet 0"
      PublicSubnet1CIDR:
        default: "CIDR range for the Public Subnet 1"
      PrivateSubnet0CIDR:
        default: "CIDR range for the Private Subnet 0"
      PrivateSubnet1CIDR:
        default: "CIDR range for the Private Subnet 1"


Resources:

# #    ____ _____
# #   / ___|___ /
# #   \___ \ |_ \
# #    ___) |__) |
# #   |____/____/
# #

  AssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketName: !Sub 'assets-${AWS::Region}-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: assets-logs
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W51
            reason: "This is a private bucket."

  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketName: !Sub 'logging-${AWS::Region}-${AWS::AccountId}'
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W51
            reason: "This is a private bucket."
          - id: W35
            reason: "This is the logging bucket for all other buckets. Does not require log to be enabled for this solution. Avoids recurring loop."


  AthenaQueryBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'secure-athena-query-${AWS::Region}-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: athena-queries-logs
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
        - Id: ExpirationRule
          Status: Enabled
          ExpirationInDays: '7'
    DeletionPolicy: Retain
                 




#    _____ ____ ____
#   | ____/ ___|___ \
#   |  _|| |     __) |
#   | |__| |___ / __/
#   |_____\____|_____|
#
  
  NewKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: MyKeyPair
  InstanceGenerateFakeDataset:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmzn2AmiId
      KeyName: !Ref NewKeyPair
      InstanceType: t4g.small
      SecurityGroupIds: 
        - !Ref EC2SecurityGroup
      # SubnetId: !Ref SubnetId
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            yum install awscli
            ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
            REGION_ID=${AWS::Region}
            yum install -y mysql jq python3
            aws --profile default configure set region $REGION_ID
            cd /tmp
            wget https://raw.githubusercontent.com/iriscferreira/lake-formation-lab/main/scripts/fake-dataset.py
            python3 -m venv venv
            source ./venv/bin/activate
            pip install Faker
            pip install pandas
            pip install numpy
            python3 fake-dataset.py
            deactivate
            aws s3 cp /tmp/profile.parquet s3://assets-$REGION_ID-$ACCOUNT_ID/dataset
            aws s3 cp /tmp/credit_cards.parquet s3://assets-$REGION_ID-$ACCOUNT_ID/dataset
            aws s3 cp /tmp/banks.parquet s3://assets-$REGION_ID-$ACCOUNT_ID/dataset
            sudo shutdown -h now


  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      # VpcId: !Ref VpcId
      GroupDescription: SG to allow SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: SSH-SG

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: ec2-instance-profile
      Path: /
      Roles: 
       - !Ref Ec2InstanceRole


# #     ____ _
# #    / ___| |_   _  ___
# #   | |  _| | | | |/ _ \
# #   | |_| | | |_| |  __/
# #    \____|_|\__,_|\___|
# #


  GlueDatabaseDataset:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: dataset
        Description: 'Data Classification Pipeline'

  
  GlueInputTableCrawlerDataset:
    Type: AWS::Glue::Crawler
    Properties:
      Role: !GetAtt GlueJobRole.Arn
      Description: Data Classification Pipeline Input Table Crawler
      DatabaseName: !Ref GlueDatabaseDataset
      Targets:
        S3Targets:
          - Path: !Sub 's3://${AssetsBucket}/dataset'
      Name: dataset-crawler
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "DEPRECATE_IN_DATABASE"
      Configuration: "{\"Version\":1.0,\"CrawlerOutput\":{\"Partitions\":{\"AddOrUpdateBehavior\":\"InheritFromTable\"},\"Tables\":{\"AddOrUpdateBehavior\":\"MergeNewColumns\"}}}"




#   |_ _|  / \  |  \/  |
#    | |  / _ \ | |\/| |
#    | | / ___ \| |  | |
#   |___/_/   \_\_|  |_|
#


  GlueJobRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 
        - GlueJobRole-${Hash}
        - { Hash: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId']]]] }
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: 'Allow'
            Principal:
              Service: 
                - glue.amazonaws.com
                - lakeformation.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
      Policies:
        - PolicyName: !Sub 
          - S3ReadWriteAccess-${Hash}
          - { Hash: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId']]]] }
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                Resource:
                  - !Sub ${AssetsBucket.Arn}
                  - !Sub ${AssetsBucket.Arn}/* 
   

    Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W28
              reason: "Explicit name to use on instructions with the users."

  Ec2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 
        - EC2-role-${Hash}
        - { Hash: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId']]]] } 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
    
  InstanceS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub 
        - EC2-policy-${Hash}
        - { Hash: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId']]]] } 
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - s3:*
            Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: AssetsBucket
                  - "/*"
      Roles:
        - !Ref Ec2InstanceRole





 